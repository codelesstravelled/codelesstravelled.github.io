<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://codelesstravelled.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codelesstravelled.github.io/" rel="alternate" type="text/html" /><updated>2022-02-25T02:00:40-03:00</updated><id>https://codelesstravelled.github.io/feed.xml</id><title type="html">The code less travelled</title><subtitle>In this blog, I will try to mix programming, computer science, mathematics and some interesting stories.</subtitle><entry><title type="html">Solidity storage usage</title><link href="https://codelesstravelled.github.io/ethereum/2022/01/24/Solidity-storage-usage.html" rel="alternate" type="text/html" title="Solidity storage usage" /><published>2022-01-24T00:00:00-03:00</published><updated>2022-01-24T00:00:00-03:00</updated><id>https://codelesstravelled.github.io/ethereum/2022/01/24/Solidity-storage-usage</id><content type="html" xml:base="https://codelesstravelled.github.io/ethereum/2022/01/24/Solidity-storage-usage.html">&lt;p&gt;In this post, I will show how Solidity administrates the Ethereum Virtual Machine (EVM) storage. Storage operations are extremely costly so good knowledge is required to optimize gas usage.&lt;/p&gt;

&lt;h1 id=&quot;ethereum-virtual-machine-storage&quot;&gt;Ethereum Virtual Machine storage&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/storage_evm.png&quot; alt=&quot;EVM Storage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage on the EVM could be seen as an array of length 2^256 with each item having a size of 32 bytes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A contract running on the EVM has extremely large storage space available. It could be seen as an array of length
2^256 with each slot having a size of 32 bytes (256 bits).&lt;/p&gt;

&lt;p&gt;Initially, all of this space is blank. For the contract developer, it does not cost any gas to have all of this blank space
available. However, when you start using this space and filling it with non 0 values, the EVM starts spending gas.&lt;/p&gt;

&lt;p&gt;Storage usage is &lt;strong&gt;extremely costly&lt;/strong&gt; on the EVM. According to the &lt;a href=&quot;https://ethereum.github.io/yellowpaper/paper.pdf&quot;&gt;Yellow Paper&lt;/a&gt;
these are the gas costs of saving and loading from storage alongside common operations:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operation&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Gas Cost&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ADD&lt;/td&gt;
      &lt;td&gt;Addition operation&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MUL&lt;/td&gt;
      &lt;td&gt;Addition operation&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AND&lt;/td&gt;
      &lt;td&gt;Bitwise AND operation&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MLOAD&lt;/td&gt;
      &lt;td&gt;Load word from memory&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MSTORE&lt;/td&gt;
      &lt;td&gt;Store word to memory&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;SLOAD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Load word from storage&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;2000&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;SSTORE&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Store word to storage&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;20000&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see in the last two rows, loading and saving to storage is orders of magnitude higher than other typical operations
like arithmetic operations, boolean operations, or loading and saving to memory.&lt;/p&gt;

&lt;p&gt;Also, gas refunds are given when you destroy a contract using the SELFDESTRUCT operation or when you set a storage space to 0.
This further incentivizes to &lt;strong&gt;use storage space as carefully as possible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: the amount of gas that can be refunded is capped to prevent abuses of this system.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;solitidy-storage-usage&quot;&gt;Solitidy storage usage&lt;/h1&gt;

&lt;h2 id=&quot;static-variables&quot;&gt;Static variables&lt;/h2&gt;

&lt;p&gt;Now we will look into how Solidity uses all of the EVM available space when you develop a contract.&lt;/p&gt;

&lt;p&gt;Statically-sized variables (everything but mappings or dynamic arrays) are stored sequentially in memory, starting from position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Typically each variable uses a 32-byte slot. In case contiguous variables are smaller than 32 bytes Solidity will try to pack them
into a slot. This follows some rules:&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x0 lower end
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x0 higher end
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x1
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var2&lt;/code&gt; will be packed into the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0&lt;/code&gt;, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var3&lt;/code&gt; will be stored at the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Variables packing work by putting the first variable at the lowest position of the 32 bytes. In this case, the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0&lt;/code&gt;
will contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var2&lt;/code&gt; in the lowest 128 bits and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var3&lt;/code&gt; in the highest 128 bits:
&lt;img src=&quot;/assets/images/storage_packed.png&quot; alt=&quot;Packed Storage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint192&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x1 lower end
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x1 higher end
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var2&lt;/code&gt; could not be packed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var1&lt;/code&gt; as their combined size is bigger than 256 bits. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var1&lt;/code&gt; will be
stored at slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var3&lt;/code&gt; will be packed into the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint192&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint192&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x1
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x2
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var3&lt;/code&gt; will be each placed in a different slot as no packing is allowed due to size limitations.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Static arrays work similarly, trying to pack lower than 256-bit variables together. However, it is not allowed to pack an array
variable with another variable.&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x0 - 0x1
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x2
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; will take 2 storage slots, the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0&lt;/code&gt; will contain the numbers 1 and 2 and the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1&lt;/code&gt; will contain the number 3.
Then, in slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2&lt;/code&gt; the variable var1 will be placed.&lt;/p&gt;

&lt;p&gt;Structs also try to pack their variables together and, like arrays, prevent their variables from being packed with external variables.&lt;/p&gt;

&lt;h2 id=&quot;dinamic-size-variables&quot;&gt;Dinamic-size variables&lt;/h2&gt;

&lt;p&gt;Mappings and dynamically-sized arrays follow a different behavior. The storage slots of their items are calculated using the Keccak-256 hash function.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-sized-arrays&quot;&gt;Dynamically-sized arrays&lt;/h3&gt;

&lt;p&gt;Arrays locate their data at the position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keccak256(p)&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; being the slot where the array is declared.&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 0x1 Will contain the array size
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the previous code, the array data will start at the position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keccak256(0x1)&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1&lt;/code&gt; is the location of the array declaration. Also, it’s important to note that the position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1&lt;/code&gt; will contain the current array size.&lt;/p&gt;

&lt;h3 id=&quot;mappings&quot;&gt;Mappings&lt;/h3&gt;

&lt;p&gt;Mappings work in a similar way as dynamic arrays. They locate their data at the position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keccak256(k . p)&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; the slot where the array is declared, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; the mapping key used, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; the concatenation operation.&lt;/p&gt;

&lt;p&gt;In contrast to dynamic arrays, the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; where the mapping is declared is not used for saving data. However, it is necessary so two different mappings that share keys have a different hash distribution.&lt;/p&gt;

&lt;h2 id=&quot;bytes-and-strings&quot;&gt;Bytes and strings&lt;/h2&gt;

&lt;p&gt;Bytes and strings use a particular encoding. If the bytes data/string is at most 31 bytes, Solidity will save this data into a single slot. The data will be placed in the higher-order bytes and use the lowest byte to save its length multiplied by 2.&lt;/p&gt;

&lt;p&gt;Let’s see an example, what happens when we declare the string “hello world!”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/encoding_bytes.png&quot; alt=&quot;String encoding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have the highest bytes with the string content and the lowest byte with its length multiplied by 2, in this case, 12.&lt;/p&gt;

&lt;p&gt;If the data is 32 bytes or longer, then the slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; where the array was declared will store &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length * 2 + 1&lt;/code&gt;. The bytes/string will be stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keccack256(p)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length * 2&lt;/code&gt; for data smaller than 32 bytes and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length * 2 + 1&lt;/code&gt; for data larger or equal than 32 bytes allows identifying a short bytes array/string from a long bytes array/string just by looking at the lowest bit. If it is a 0 will be short, if it is a 1 will be long.&lt;/p&gt;

&lt;p&gt;In conclusion, for a bytes/string declared at slot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Bytes/string type&lt;/th&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th&gt;Data location&lt;/th&gt;
      &lt;th&gt;Data length location&lt;/th&gt;
      &lt;th&gt;Last bit of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Short&lt;/td&gt;
      &lt;td&gt;At most 31 bytes&lt;/td&gt;
      &lt;td&gt;Highest 31 bytes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; (left aligned)&lt;/td&gt;
      &lt;td&gt;Lowest byte of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; (length * 2)&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;32 bytes or more&lt;/td&gt;
      &lt;td&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keccak256(p)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; (length * 2 + 1)&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;

&lt;p&gt;For further information about these topics I recommend the following lectures:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://certora.com/blog/corruptedMemory.html&quot;&gt;https://certora.com/blog/corruptedMemory.html&lt;/a&gt;
&lt;a href=&quot;https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html&quot;&gt;https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="ethereum" /><category term="solidity" /><category term="evm" /><category term="ethereum" /><summary type="html">In this post, I will show how Solidity administrates the Ethereum Virtual Machine (EVM) storage. Storage operations are extremely costly so good knowledge is required to optimize gas usage. Ethereum Virtual Machine storage Storage on the EVM could be seen as an array of length 2^256 with each item having a size of 32 bytes. A contract running on the EVM has extremely large storage space available. It could be seen as an array of length 2^256 with each slot having a size of 32 bytes (256 bits). Initially, all of this space is blank. For the contract developer, it does not cost any gas to have all of this blank space available. However, when you start using this space and filling it with non 0 values, the EVM starts spending gas. Storage usage is extremely costly on the EVM. According to the Yellow Paper these are the gas costs of saving and loading from storage alongside common operations: Operation Description Gas Cost ADD Addition operation 3 MUL Addition operation 5 AND Bitwise AND operation 3 MLOAD Load word from memory 3 MSTORE Store word to memory 5 SLOAD Load word from storage 2000 SSTORE Store word to storage 20000 As you can see in the last two rows, loading and saving to storage is orders of magnitude higher than other typical operations like arithmetic operations, boolean operations, or loading and saving to memory. Also, gas refunds are given when you destroy a contract using the SELFDESTRUCT operation or when you set a storage space to 0. This further incentivizes to use storage space as carefully as possible. Sidenote: the amount of gas that can be refunded is capped to prevent abuses of this system. Solitidy storage usage Static variables Now we will look into how Solidity uses all of the EVM available space when you develop a contract. Statically-sized variables (everything but mappings or dynamic arrays) are stored sequentially in memory, starting from position 0x0. Typically each variable uses a 32-byte slot. In case contiguous variables are smaller than 32 bytes Solidity will try to pack them into a slot. This follows some rules: contract Storage { uint128 var1 = 1; // 0x0 lower end uint128 var2 = 2; // 0x0 higher end uint128 var3 = 3; // 0x1 } Here var1 and var2 will be packed into the slot 0x0, while var3 will be stored at the slot 0x1. Variables packing work by putting the first variable at the lowest position of the 32 bytes. In this case, the slot 0x0 will contain var2 in the lowest 128 bits and var3 in the highest 128 bits: contract Storage { uint192 var1 = 1; // 0x0 uint128 var2 = 2; // 0x1 lower end uint128 var3 = 3; // 0x1 higher end } Here var2 could not be packed with var1 as their combined size is bigger than 256 bits. var1 will be stored at slot 0x0. var2 and var3 will be packed into the slot 0x1 contract Storage { uint192 var1 = 1; // 0x0 uint192 var2 = 2; // 0x1 uint128 var3 = 3; // 0x2 } Here var1, var2, and var3 will be each placed in a different slot as no packing is allowed due to size limitations. Static arrays work similarly, trying to pack lower than 256-bit variables together. However, it is not allowed to pack an array variable with another variable. contract Storage { uint128[3] array = [1, 2, 3]; // 0x0 - 0x1 uint128 var1 = 4; // 0x2 } Here the variable array will take 2 storage slots, the slot 0x0 will contain the numbers 1 and 2 and the slot 0x1 will contain the number 3. Then, in slot 0x2 the variable var1 will be placed. Structs also try to pack their variables together and, like arrays, prevent their variables from being packed with external variables. Dinamic-size variables Mappings and dynamically-sized arrays follow a different behavior. The storage slots of their items are calculated using the Keccak-256 hash function. Dynamically-sized arrays Arrays locate their data at the position keccak256(p) with p being the slot where the array is declared. contract Storage { uint256 var1 = 4; // 0x0 uint256[] array; // 0x1 Will contain the array size } In the previous code, the array data will start at the position keccak256(0x1) as 0x1 is the location of the array declaration. Also, it’s important to note that the position 0x1 will contain the current array size. Mappings Mappings work in a similar way as dynamic arrays. They locate their data at the position keccak256(k . p) with p the slot where the array is declared, k the mapping key used, and . the concatenation operation. In contrast to dynamic arrays, the slot p where the mapping is declared is not used for saving data. However, it is necessary so two different mappings that share keys have a different hash distribution. Bytes and strings Bytes and strings use a particular encoding. If the bytes data/string is at most 31 bytes, Solidity will save this data into a single slot. The data will be placed in the higher-order bytes and use the lowest byte to save its length multiplied by 2. Let’s see an example, what happens when we declare the string “hello world!”: We have the highest bytes with the string content and the lowest byte with its length multiplied by 2, in this case, 12. If the data is 32 bytes or longer, then the slot p where the array was declared will store length * 2 + 1. The bytes/string will be stored at keccack256(p). The use of length * 2 for data smaller than 32 bytes and length * 2 + 1 for data larger or equal than 32 bytes allows identifying a short bytes array/string from a long bytes array/string just by looking at the lowest bit. If it is a 0 will be short, if it is a 1 will be long. In conclusion, for a bytes/string declared at slot p: Bytes/string type Size Data location Data length location Last bit of p Short At most 31 bytes Highest 31 bytes of p (left aligned) Lowest byte of p (length * 2) 0 Long 32 bytes or more At keccak256(p) At p (length * 2 + 1) 1 Further reading For further information about these topics I recommend the following lectures: https://certora.com/blog/corruptedMemory.html https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html</summary></entry><entry><title type="html">Planar graphs and maps</title><link href="https://codelesstravelled.github.io/graph-theory/2022/01/17/Eulers-formula-and-maps.html" rel="alternate" type="text/html" title="Planar graphs and maps" /><published>2022-01-17T18:00:00-03:00</published><updated>2022-01-17T18:00:00-03:00</updated><id>https://codelesstravelled.github.io/graph-theory/2022/01/17/Eulers-formula-and-maps</id><content type="html" xml:base="https://codelesstravelled.github.io/graph-theory/2022/01/17/Eulers-formula-and-maps.html">&lt;p&gt;Typically, maps can be represented by planar graphs. Planar graphs are graphs that can be drawn without their edges intersecting.&lt;/p&gt;

&lt;p&gt;For example, the following is a planar graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/planar_graph1.png&quot; alt=&quot;Countries borders&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the right, we have a representation without any edge crossing another.&lt;/p&gt;

&lt;p&gt;On the contrary, the following isn’t a planar graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/planar_graph2.png&quot; alt=&quot;Countries borders&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A proof that it isn’t a planar graph is the representation on the right, which shows that this graph contains a subdivision of \(K_5\). By &lt;a href=&quot;https://www.math.cmu.edu/~mradclif/teaching/228F16/Kuratowski.pdf&quot;&gt;Kuratowski’s theorem&lt;/a&gt;, this &lt;strong&gt;is not&lt;/strong&gt; a planar graph.&lt;/p&gt;

&lt;p&gt;As stated before, maps often can be represented by planar graphs. For this to be possible, the following conditions must be true:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All “territories” or “countries” must be contiguous. For example, an &lt;a href=&quot;https://en.wikipedia.org/wiki/Alaska&quot;&gt;US-Alaska&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Kaliningrad_Oblast&quot;&gt;Russia-Kaliningrad&lt;/a&gt; situation is not allowed.&lt;/li&gt;
  &lt;li&gt;The maximum amount of regions that could meet at a corner or vertex is 3. It can’t exist a 4-way border or higher. For example, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Four_Corners&quot;&gt;Four Corners&lt;/a&gt; in the US isn’t allowed in a planar representation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this introduction, let’s see two interesting facts about maps with their relationship to planar graphs.&lt;/p&gt;

&lt;h1 id=&quot;4-color-theorem&quot;&gt;4-color theorem&lt;/h1&gt;

&lt;p&gt;The 4-color theorem states that any map (following the conditions we have given) could be colored using at most 4 colors so that two adjacent territories are of a different color. It was proved originally in 1976 by Kenneth Appel and Wolfgang Haken using computers. After decades of controversy, the proof has been simplified and verified several times also using theorem proving software.&lt;/p&gt;

&lt;p&gt;A similar theorem, the 5-color theorem, which is similar but with 5 colors has a much simpler proof that could easily be done by hand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/four_colors.png&quot; alt=&quot;Four color US map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A map of the US using only 4 colors.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that both Utah and New Mexico had been painted in yellow while there is technically a border between them. This is, as we mentioned, because it can’t exist a 4-way border or higher.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/four_colors3.png&quot; alt=&quot;Four corners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The four corners&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/four_colors2.png&quot; alt=&quot;Four color invented map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An invented map with strange borders also following the 4-color theorem.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;relationship-between-territories-borders-and-tripoints&quot;&gt;Relationship between territories, borders and tripoints&lt;/h1&gt;

&lt;p&gt;Following Euler’s formula for planar graphs, we could establish a relationship between the number of territories, borders and tripoints (point of meeting of the boundaries of three territories).&lt;/p&gt;

&lt;p&gt;Given Euler’s formula:
\(v - e + f = \chi\)&lt;/p&gt;

&lt;p&gt;We will consider \(v\) the number of territories, \(e\) the number of borders between any two territories and \(f\) the number of tripoints. Also, we will consider Euler characteristic \(\chi = 1\).&lt;/p&gt;

&lt;p&gt;For example, let’s consider the map of South America. Here there are 13 different territories (12 countries and the French Guiana):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/countries1.png&quot; alt=&quot;Countries borders&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Counting the number of borders, we could find that there are 25:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/countries3.png&quot; alt=&quot;Countries borders&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, using Euler’s formula we can find the number of tripoints:&lt;/p&gt;

\[v - e + f = \chi\]

\[13 - 25 + f = 1\]

\[f = 13\]

&lt;p&gt;Let’s see if this number is correct:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Brazil - French Guiana - Suriname&lt;/li&gt;
  &lt;li&gt;Brazil - Suriname - Guyana&lt;/li&gt;
  &lt;li&gt;Brazil - Guyana - Venezuela&lt;/li&gt;
  &lt;li&gt;Brazil - Venezuela - Colombia&lt;/li&gt;
  &lt;li&gt;Brazil - Colombia - Peru&lt;/li&gt;
  &lt;li&gt;Brazil - Peru - Bolivia&lt;/li&gt;
  &lt;li&gt;Brazil - Bolivia - Paraguay&lt;/li&gt;
  &lt;li&gt;Brazil - Paraguay - Argentina&lt;/li&gt;
  &lt;li&gt;Brazil - Argentina - Uruguay&lt;/li&gt;
  &lt;li&gt;Colombia - Ecuador - Peru&lt;/li&gt;
  &lt;li&gt;Peru - Bolivia - Chile&lt;/li&gt;
  &lt;li&gt;Bolivia - Chile - Argentina&lt;/li&gt;
  &lt;li&gt;Argentina - Bolivia - Paraguay&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a side note, we used Euler characteristic of \(\chi = 1\) although for planar graphs it is \(\chi = 2\). This is because we only counted as faces \(f\) the tripoints between countries. But there is an extra face, on the outer zone of the graph.&lt;/p&gt;

&lt;p&gt;Here we could see the 13 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tripoints&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faces&lt;/code&gt; of the graph, and a face number 14 that corresponds to the outer part of the graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/countries4.png&quot; alt=&quot;Countries tripoints&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, as we substracted 1 from \(f\), we could also subtract 1 from \(\chi\) to maintain the Euler formula unaltered.&lt;/p&gt;</content><author><name></name></author><category term="graph-theory" /><category term="graph" /><category term="euler" /><category term="maps" /><category term="graph-theory" /><summary type="html">Typically, maps can be represented by planar graphs. Planar graphs are graphs that can be drawn without their edges intersecting. For example, the following is a planar graph: On the right, we have a representation without any edge crossing another. On the contrary, the following isn’t a planar graph: A proof that it isn’t a planar graph is the representation on the right, which shows that this graph contains a subdivision of \(K_5\). By Kuratowski’s theorem, this is not a planar graph. As stated before, maps often can be represented by planar graphs. For this to be possible, the following conditions must be true: All “territories” or “countries” must be contiguous. For example, an US-Alaska or Russia-Kaliningrad situation is not allowed. The maximum amount of regions that could meet at a corner or vertex is 3. It can’t exist a 4-way border or higher. For example, the Four Corners in the US isn’t allowed in a planar representation. With this introduction, let’s see two interesting facts about maps with their relationship to planar graphs. 4-color theorem The 4-color theorem states that any map (following the conditions we have given) could be colored using at most 4 colors so that two adjacent territories are of a different color. It was proved originally in 1976 by Kenneth Appel and Wolfgang Haken using computers. After decades of controversy, the proof has been simplified and verified several times also using theorem proving software. A similar theorem, the 5-color theorem, which is similar but with 5 colors has a much simpler proof that could easily be done by hand. A map of the US using only 4 colors. Note that both Utah and New Mexico had been painted in yellow while there is technically a border between them. This is, as we mentioned, because it can’t exist a 4-way border or higher. The four corners An invented map with strange borders also following the 4-color theorem. Relationship between territories, borders and tripoints Following Euler’s formula for planar graphs, we could establish a relationship between the number of territories, borders and tripoints (point of meeting of the boundaries of three territories). Given Euler’s formula: \(v - e + f = \chi\) We will consider \(v\) the number of territories, \(e\) the number of borders between any two territories and \(f\) the number of tripoints. Also, we will consider Euler characteristic \(\chi = 1\). For example, let’s consider the map of South America. Here there are 13 different territories (12 countries and the French Guiana): Counting the number of borders, we could find that there are 25: So, using Euler’s formula we can find the number of tripoints: \[v - e + f = \chi\] \[13 - 25 + f = 1\] \[f = 13\] Let’s see if this number is correct: Brazil - French Guiana - Suriname Brazil - Suriname - Guyana Brazil - Guyana - Venezuela Brazil - Venezuela - Colombia Brazil - Colombia - Peru Brazil - Peru - Bolivia Brazil - Bolivia - Paraguay Brazil - Paraguay - Argentina Brazil - Argentina - Uruguay Colombia - Ecuador - Peru Peru - Bolivia - Chile Bolivia - Chile - Argentina Argentina - Bolivia - Paraguay As a side note, we used Euler characteristic of \(\chi = 1\) although for planar graphs it is \(\chi = 2\). This is because we only counted as faces \(f\) the tripoints between countries. But there is an extra face, on the outer zone of the graph. Here we could see the 13 tripoints or faces of the graph, and a face number 14 that corresponds to the outer part of the graph: So, as we substracted 1 from \(f\), we could also subtract 1 from \(\chi\) to maintain the Euler formula unaltered.</summary></entry><entry><title type="html">Solving Einstein riddle with Z3</title><link href="https://codelesstravelled.github.io/python/z3/riddle/2021/12/04/solving-Einstein-riddle-with-Z3.html" rel="alternate" type="text/html" title="Solving Einstein riddle with Z3" /><published>2021-12-04T14:00:00-03:00</published><updated>2021-12-04T14:00:00-03:00</updated><id>https://codelesstravelled.github.io/python/z3/riddle/2021/12/04/solving-Einstein-riddle-with-Z3</id><content type="html" xml:base="https://codelesstravelled.github.io/python/z3/riddle/2021/12/04/solving-Einstein-riddle-with-Z3.html">&lt;p&gt;Einstein’s five-houses consists, as the title says, of 5 houses. Each house has a certain color. Inside of each house, its owner has a pet, smokes a certain brand of cigars, drinks a certain beverage, and has a nationality. Any of these is unique between the house owners.&lt;/p&gt;

&lt;p&gt;For a more detailed explanation, &lt;a href=&quot;https://udel.edu/~os/riddle.html&quot;&gt;here&lt;/a&gt; is one from the University of Delaware.&lt;/p&gt;

&lt;h1 id=&quot;hints&quot;&gt;Hints&lt;/h1&gt;

&lt;p&gt;The riddle gives the following hints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the Brit lives in the red house&lt;/li&gt;
  &lt;li&gt;the Swede keeps dogs as pets&lt;/li&gt;
  &lt;li&gt;the Dane drinks tea&lt;/li&gt;
  &lt;li&gt;the green house is on the left of the white house&lt;/li&gt;
  &lt;li&gt;the green house’s owner drinks coffee&lt;/li&gt;
  &lt;li&gt;the person who smokes Pall Mall rears birds&lt;/li&gt;
  &lt;li&gt;the owner of the yellow house smokes Dunhill&lt;/li&gt;
  &lt;li&gt;the man living in the center house drinks milk&lt;/li&gt;
  &lt;li&gt;the Norwegian lives in the first house&lt;/li&gt;
  &lt;li&gt;the man who smokes blends lives next to the one who keeps cats&lt;/li&gt;
  &lt;li&gt;the man who keeps horses lives next to the man who smokes Dunhill&lt;/li&gt;
  &lt;li&gt;the owner who smokes BlueMaster drinks beer&lt;/li&gt;
  &lt;li&gt;the German smokes Prince&lt;/li&gt;
  &lt;li&gt;the Norwegian lives next to the blue house&lt;/li&gt;
  &lt;li&gt;the man who smokes blend has a neighbor who drinks water&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;question&quot;&gt;Question&lt;/h1&gt;

&lt;p&gt;Given these hints, you have to answer the question &lt;strong&gt;Who owns the fish?&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;solving-it-with-python-z3&quot;&gt;Solving it with Python Z3&lt;/h1&gt;

&lt;p&gt;To solve this problem I decided to try &lt;a href=&quot;https://github.com/Z3Prover/z3&quot;&gt;Microsoft’s Z3 Theorem Prover&lt;/a&gt;. It can be used in different programming languages such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Julia&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; among others. I decided to go with the Python interface.&lt;/p&gt;

&lt;p&gt;Z3 can be used to solve Satisfiability Modulo Theories (SMT) problems. In simple terms, these problems involve several variables and logical relationships between them. The solver will try to find, if possible, a set of values for the variables that satisfy the relationships.&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/houses.png&quot; alt=&quot;Houses&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For simplicity, I have assigned each house with a letter: &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;. Then, I created five 5x5 matrices. Each matrix corresponds to a category: &lt;em&gt;Color&lt;/em&gt;, &lt;em&gt;Nationality&lt;/em&gt;, &lt;em&gt;Drink&lt;/em&gt;, &lt;em&gt;Cigar&lt;/em&gt;, &lt;em&gt;Pet&lt;/em&gt;. Inside each matrix, the rows correspond to the different values the category could take. For example, in the &lt;em&gt;Color&lt;/em&gt; matrix, the rows correspond to &lt;em&gt;Red&lt;/em&gt;, &lt;em&gt;Blue&lt;/em&gt;, &lt;em&gt;Green&lt;/em&gt;, &lt;em&gt;Yellow&lt;/em&gt;, &lt;em&gt;White&lt;/em&gt;. The columns identify each house: &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/matrices.png&quot; alt=&quot;Matrices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside the cell of each matrix, I have assigned a Z3 Boolean value. It will be &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;1&lt;/strong&gt; if, for the corresponding category, the house has a certain value. For example, if house &lt;em&gt;A&lt;/em&gt; is of &lt;em&gt;color red&lt;/em&gt;, in the &lt;em&gt;Color&lt;/em&gt; matrix the cell corresponding to column &lt;em&gt;A&lt;/em&gt; and  row &lt;em&gt;red&lt;/em&gt; will contain a &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;1&lt;/strong&gt;. Logically, the rest of the values will contain &lt;strong&gt;false&lt;/strong&gt; or &lt;strong&gt;0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/matrix_colors.png&quot; alt=&quot;Matrix of color&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An important property is that each row or column can only contain a &lt;strong&gt;1&lt;/strong&gt; or &lt;strong&gt;true&lt;/strong&gt; value. It isn’t possible that, for example, both the &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;C&lt;/em&gt; houses share a color. It is also impossible that a house has two different colors.&lt;/p&gt;

&lt;p&gt;This is an important property and it will be a logical restraint of our Z3 model.&lt;/p&gt;

&lt;p&gt;Let’s see how I implemented it in Python.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;houses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Brit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swede&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Norwegian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;German&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Drink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Coffee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Milk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Beer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Water&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PallMall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dunhill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Prince&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BlueMaster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Pet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fish&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Horse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_names_constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amount_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}_{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;houses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First I defined the houses’ names and all of the categories and their possible values.&lt;/p&gt;

&lt;p&gt;Then, I created the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_names_constraints&lt;/code&gt; that has two purposes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To create the five matrices and populate them with Booleans values (lines 17 to 20).&lt;/li&gt;
  &lt;li&gt;To create the Z3 model constraints corresponding to each matrix row and column (lines 22 to 24).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic-relationships&quot;&gt;Basic relationships&lt;/h2&gt;

&lt;p&gt;Now, let’s continue establishing model relationships. The riddle gives us a lot of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basic relationships&lt;/code&gt;. These take two different values from different categories and assign them to a certain person or house. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basic relationships&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the Brit lives in the red house&lt;/li&gt;
  &lt;li&gt;the Swede keeps dogs as pets&lt;/li&gt;
  &lt;li&gt;the Dane drinks tea&lt;/li&gt;
  &lt;li&gt;the green house’s owner drinks coffee&lt;/li&gt;
  &lt;li&gt;the person who smokes Pall Mall rears birds&lt;/li&gt;
  &lt;li&gt;the owner of the yellow house smokes Dunhill&lt;/li&gt;
  &lt;li&gt;the owner who smokes BlueMaster drinks beer&lt;/li&gt;
  &lt;li&gt;the German smokes Prince&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the function that will be used to create these relationships.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;second_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, it transforms the text category and values into their corresponding indexes. Then it makes that the two rows have at least a coincidence in their corresponding house.&lt;/p&gt;

&lt;p&gt;For example, the first relationship says: &lt;em&gt;the Brit lives in the red house&lt;/em&gt;. That means that the Brit row in the nationalities matrix must be equal to the red row in the colors matrix.&lt;/p&gt;

&lt;p&gt;As the code shows this relationship could be easily achieved with an &lt;strong&gt;And&lt;/strong&gt; and an &lt;strong&gt;Or&lt;/strong&gt; clauses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/matrix_matching.png&quot; alt=&quot;Matrix of color&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;house-constraints&quot;&gt;House constraints&lt;/h2&gt;

&lt;p&gt;Next, we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;house constraints&lt;/code&gt;. These are simple to add to the model. The two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;house constraints&lt;/code&gt; that we have are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the man living in the center house drinks milk&lt;/li&gt;
  &lt;li&gt;the Norwegian lives in the first house&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_house_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;house&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;houses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;house&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We simple force the corresponding cell to be &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;neighbor-constraints&quot;&gt;Neighbor constraints&lt;/h2&gt;

&lt;p&gt;Finally, we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neighbor constraints&lt;/code&gt;. These come in the form of &lt;em&gt;X&lt;/em&gt; lives next to &lt;em&gt;Y&lt;/em&gt;. The riddle lists the following ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the Norwegian lives next to the blue house&lt;/li&gt;
  &lt;li&gt;the man who smokes blends lives next to the one who keeps cats&lt;/li&gt;
  &lt;li&gt;the man who keeps horses lives next to the man who smokes Dunhill&lt;/li&gt;
  &lt;li&gt;the man who smokes blend has a neighbor who drinks water&lt;/li&gt;
  &lt;li&gt;the green house is on the left of the white house&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the function that i came up with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_neighbor_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;second_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;conditions_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conditions_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conditions_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function is the most complex, but its logic is very similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basic relationships&lt;/code&gt;. The only difference is that we keep a shift of \(\pm\)1 between the rows’ indexes.&lt;/p&gt;

&lt;p&gt;We have a &lt;em&gt;left_only&lt;/em&gt; clause that is by default &lt;strong&gt;False&lt;/strong&gt;. For the last constraint &lt;em&gt;the green house is on the left of the white house&lt;/em&gt; we put this value as &lt;em&gt;True&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;final-steps-and-result&quot;&gt;Final steps and result&lt;/h1&gt;

&lt;p&gt;We finished with all the logic of the model, we only need to call the functions to build the model.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_names_constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Brit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swede&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Drink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Drink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Coffee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PallMall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dunhill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BlueMaster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Drink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Beer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;German&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Prince&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_house_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Drink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Milk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_house_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Norwegian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_neighbor_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_neighbor_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dunhill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Horse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_neighbor_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cigar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Drink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Water&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_neighbor_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nationality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Norwegian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_neighbor_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;true_statements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;true_statements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;house&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;houses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;house&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true_statements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true_statements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true_statements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;house&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We added some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prints&lt;/code&gt; to see the viability of the model and the model itself. In the end, we added some logic to parse the results. We would only like to see which values in the matrices contain a &lt;strong&gt;true&lt;/strong&gt; value.&lt;/p&gt;

&lt;p&gt;After running the program it shows us:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Dunhill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Yellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Water'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Norwegian'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Dane'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Blends'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tea'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Horse'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bird'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Brit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PallMall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Milk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Prince'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'German'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Fish'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Coffee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Dog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Beer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Swede'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'White'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BlueMaster'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could see that the German is the owner of the fish.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href=&quot;https://udel.edu/~os/riddle-solution.html&quot;&gt;solution&lt;/a&gt;, we verify that our model worked correctly.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="z3" /><category term="riddle" /><summary type="html">Einstein’s five-houses consists, as the title says, of 5 houses. Each house has a certain color. Inside of each house, its owner has a pet, smokes a certain brand of cigars, drinks a certain beverage, and has a nationality. Any of these is unique between the house owners. For a more detailed explanation, here is one from the University of Delaware. Hints The riddle gives the following hints: the Brit lives in the red house the Swede keeps dogs as pets the Dane drinks tea the green house is on the left of the white house the green house’s owner drinks coffee the person who smokes Pall Mall rears birds the owner of the yellow house smokes Dunhill the man living in the center house drinks milk the Norwegian lives in the first house the man who smokes blends lives next to the one who keeps cats the man who keeps horses lives next to the man who smokes Dunhill the owner who smokes BlueMaster drinks beer the German smokes Prince the Norwegian lives next to the blue house the man who smokes blend has a neighbor who drinks water Question Given these hints, you have to answer the question Who owns the fish? Solving it with Python Z3 To solve this problem I decided to try Microsoft’s Z3 Theorem Prover. It can be used in different programming languages such as C, C++, Java, Julia, Python among others. I decided to go with the Python interface. Z3 can be used to solve Satisfiability Modulo Theories (SMT) problems. In simple terms, these problems involve several variables and logical relationships between them. The solver will try to find, if possible, a set of values for the variables that satisfy the relationships. Implementation For simplicity, I have assigned each house with a letter: A, B, C, D, E. Then, I created five 5x5 matrices. Each matrix corresponds to a category: Color, Nationality, Drink, Cigar, Pet. Inside each matrix, the rows correspond to the different values the category could take. For example, in the Color matrix, the rows correspond to Red, Blue, Green, Yellow, White. The columns identify each house: A, B, C, D, E. Inside the cell of each matrix, I have assigned a Z3 Boolean value. It will be true or 1 if, for the corresponding category, the house has a certain value. For example, if house A is of color red, in the Color matrix the cell corresponding to column A and row red will contain a true or 1. Logically, the rest of the values will contain false or 0 An important property is that each row or column can only contain a 1 or true value. It isn’t possible that, for example, both the A and C houses share a color. It is also impossible that a house has two different colors. This is an important property and it will be a logical restraint of our Z3 model. Let’s see how I implemented it in Python. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from z3 import * houses = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;] names = {&quot;Color&quot;: [&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;, &quot;Yellow&quot;, &quot;White&quot;], &quot;Nationality&quot;: [&quot;Brit&quot;, &quot;Swede&quot;, &quot;Dane&quot;, &quot;Norwegian&quot;, &quot;German&quot;], &quot;Drink&quot;: [&quot;Coffee&quot;, &quot;Milk&quot;, &quot;Beer&quot;, &quot;Water&quot;, &quot;Tea&quot;], &quot;Cigar&quot;: [&quot;PallMall&quot;, &quot;Dunhill&quot;, &quot;Prince&quot;, &quot;BlueMaster&quot;, &quot;Blends&quot;], &quot;Pet&quot;: [&quot;Dog&quot;, &quot;Bird&quot;, &quot;Cat&quot;, &quot;Fish&quot;, &quot;Horse&quot;]} matrices = {} def add_names_constraints(solver, names): for (name, values) in names.items(): amount_items = len(values) matrix = [[0 for x in range(amount_items)] for y in range(amount_items)] for i in range(amount_items): for j in range(amount_items): matrix[i][j] = Bool(&quot;{}_{}&quot;.format(houses[j], values[i])) for i in range(amount_items): solver.add(Sum([If(item, 1, 0) for item in matrix[i]]) == 1) solver.add(Sum([If(row[i], 1, 0) for row in matrix]) == 1) matrices[name] = matrix First I defined the houses’ names and all of the categories and their possible values. Then, I created the function add_names_constraints that has two purposes: To create the five matrices and populate them with Booleans values (lines 17 to 20). To create the Z3 model constraints corresponding to each matrix row and column (lines 22 to 24). Basic relationships Now, let’s continue establishing model relationships. The riddle gives us a lot of basic relationships. These take two different values from different categories and assign them to a certain person or house. The basic relationships are: the Brit lives in the red house the Swede keeps dogs as pets the Dane drinks tea the green house’s owner drinks coffee the person who smokes Pall Mall rears birds the owner of the yellow house smokes Dunhill the owner who smokes BlueMaster drinks beer the German smokes Prince Here is the function that will be used to create these relationships. 1 2 3 4 5 6 7 8 9 def add_relation(solver, first_category, first_value, second_category, second_value): index1 = names[first_category].index(first_value) index2 = names[second_category].index(second_value) row1 = matrices[first_category][index1] row2 = matrices[second_category][index2] solver.add(Or([And(row1[i], row2[i]) for i in range(len(row1))])) First, it transforms the text category and values into their corresponding indexes. Then it makes that the two rows have at least a coincidence in their corresponding house. For example, the first relationship says: the Brit lives in the red house. That means that the Brit row in the nationalities matrix must be equal to the red row in the colors matrix. As the code shows this relationship could be easily achieved with an And and an Or clauses. House constraints Next, we have the house constraints. These are simple to add to the model. The two house constraints that we have are: the man living in the center house drinks milk the Norwegian lives in the first house 1 2 3 4 5 6 7 def add_house_constraint(solver, house, category, value): index1 = names[category].index(value) index2 = houses.index(house) item = matrices[category][index1][index2] solver.add(item == True) We simple force the corresponding cell to be true. Neighbor constraints Finally, we have the neighbor constraints. These come in the form of X lives next to Y. The riddle lists the following ones: the Norwegian lives next to the blue house the man who smokes blends lives next to the one who keeps cats the man who keeps horses lives next to the man who smokes Dunhill the man who smokes blend has a neighbor who drinks water the green house is on the left of the white house This is the function that i came up with: 1 2 3 4 5 6 7 8 9 10 11 12 13 def add_neighbor_constraint(solver, first_category, first_value, second_category, second_value, left_only=False): index1 = names[first_category].index(first_value) index2 = names[second_category].index(second_value) row1 = matrices[first_category][index1] row2 = matrices[second_category][index2] conditions_list = [And(row1[i - 1], row2[i]) for i in range(1, len(row1))] if not left_only: conditions_list += [And(row2[i - 1], row1[i]) for i in range(1, len(row1))] solver.add(Or(conditions_list)) This function is the most complex, but its logic is very similar to the basic relationships. The only difference is that we keep a shift of \(\pm\)1 between the rows’ indexes. We have a left_only clause that is by default False. For the last constraint the green house is on the left of the white house we put this value as True. Final steps and result We finished with all the logic of the model, we only need to call the functions to build the model. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 s = Solver() add_names_constraints(s, names) add_relation(s, &quot;Nationality&quot;, &quot;Brit&quot;, &quot;Color&quot;, &quot;Red&quot;) add_relation(s, &quot;Nationality&quot;, &quot;Swede&quot;, &quot;Pet&quot;, &quot;Dog&quot;) add_relation(s, &quot;Nationality&quot;, &quot;Dane&quot;, &quot;Drink&quot;, &quot;Tea&quot;) add_relation(s, &quot;Color&quot;, &quot;Green&quot;, &quot;Drink&quot;, &quot;Coffee&quot;) add_relation(s, &quot;Cigar&quot;, &quot;PallMall&quot;, &quot;Pet&quot;, &quot;Bird&quot;) add_relation(s, &quot;Color&quot;, &quot;Yellow&quot;, &quot;Cigar&quot;, &quot;Dunhill&quot;) add_relation(s, &quot;Cigar&quot;, &quot;BlueMaster&quot;, &quot;Drink&quot;, &quot;Beer&quot;) add_relation(s, &quot;Nationality&quot;, &quot;German&quot;, &quot;Cigar&quot;, &quot;Prince&quot;) add_house_constraint(s, &quot;C&quot;, &quot;Drink&quot;, &quot;Milk&quot;) add_house_constraint(s, &quot;A&quot;, &quot;Nationality&quot;, &quot;Norwegian&quot;) add_neighbor_constraint(s, &quot;Cigar&quot;, &quot;Blends&quot;, &quot;Pet&quot;, &quot;Cat&quot;) add_neighbor_constraint(s, &quot;Cigar&quot;, &quot;Dunhill&quot;, &quot;Pet&quot;, &quot;Horse&quot;) add_neighbor_constraint(s, &quot;Cigar&quot;, &quot;Blends&quot;, &quot;Drink&quot;, &quot;Water&quot;) add_neighbor_constraint(s, &quot;Nationality&quot;, &quot;Norwegian&quot;, &quot;Color&quot;, &quot;Blue&quot;) add_neighbor_constraint(s, &quot;Color&quot;, &quot;Green&quot;, &quot;Color&quot;, &quot;White&quot;, left_only=True) print (s.check()) print (s.model()) m = s.model() true_statements = [] for x in m: if is_true(m[x]): true_statements.append(x.name()) result = {} for house in houses: result[house] = [true_statements[i][2:] for i in range(len(true_statements)) if true_statements[i][0] == house] print(result) We added some prints to see the viability of the model and the model itself. In the end, we added some logic to parse the results. We would only like to see which values in the matrices contain a true value. After running the program it shows us: {'A': ['Dunhill', 'Cat', 'Yellow', 'Water', 'Norwegian'], 'B': ['Blue', 'Dane', 'Blends', 'Tea', 'Horse'], 'C': ['Bird', 'Brit', 'Red', 'PallMall', 'Milk'], 'D': ['Prince', 'German', 'Fish', 'Green', 'Coffee'], 'E': ['Dog', 'Beer', 'Swede', 'White', 'BlueMaster']} We could see that the German is the owner of the fish. Looking at the solution, we verify that our model worked correctly.</summary></entry><entry><title type="html">Min-cut problem variations</title><link href="https://codelesstravelled.github.io/min-cut/graph/graph-theory/2021/11/23/min-cut-problem-variations.html" rel="alternate" type="text/html" title="Min-cut problem variations" /><published>2021-11-23T23:52:51-03:00</published><updated>2021-11-23T23:52:51-03:00</updated><id>https://codelesstravelled.github.io/min-cut/graph/graph-theory/2021/11/23/min-cut-problem-variations</id><content type="html" xml:base="https://codelesstravelled.github.io/min-cut/graph/graph-theory/2021/11/23/min-cut-problem-variations.html">&lt;p&gt;Last week I needed to solve a variation of the min-cut problem for flow networks. For those who don’t know about the minimum cut of a flow network, I will give a brief explanation.&lt;/p&gt;

&lt;h1 id=&quot;flow-networks&quot;&gt;Flow networks&lt;/h1&gt;

&lt;p&gt;A flow network is a directed graph, typically used to represent situations like traffic in computer networks, fluid in pipes, currents in an electrical circuit, vehicles in a road network.&lt;/p&gt;

&lt;p&gt;This graph’s edges typically have an associated weight known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capacity&lt;/code&gt;. In simple terms, its defines the maximum &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flow&lt;/code&gt; that could pass by that edge.&lt;/p&gt;

&lt;p&gt;Another important feature of these types of graphs is that they have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; node and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sink&lt;/code&gt; node. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; has only outgoing flow and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sink&lt;/code&gt; had only incoming flow.&lt;/p&gt;

&lt;p&gt;As an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/graph1.png&quot; alt=&quot;Flow network&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this flow network, the &lt;strong&gt;S&lt;/strong&gt; node is the source and the &lt;strong&gt;T&lt;/strong&gt; node is the sink. The numbers along the edges represent the capacities. This is a pretty simple network, we obviously could represent much more complex ones.&lt;/p&gt;

&lt;h1 id=&quot;minimum-cut-problem&quot;&gt;Minimum cut problem&lt;/h1&gt;

&lt;p&gt;The minimum cut problem consists of, given a flow network, dividing it into two parts by &lt;em&gt;cutting&lt;/em&gt; some edges. In one of the parts it must be included the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; node and, in the other one, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sink&lt;/code&gt; node. It is a &lt;strong&gt;minimum&lt;/strong&gt; cut because you have to select the edges which summation is minimum between all the possible cuts.&lt;/p&gt;

&lt;p&gt;Following the previous example, I marked some possible cuts. In this case the minimum cut is the one in blue which takes the edges S-A and C-T, totaling a minimum of 5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/graph2.png&quot; alt=&quot;Flow network with cuts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a side note, the minimum cut is always the same as the maximum flow of the network, in this case 5.&lt;/p&gt;

&lt;h1 id=&quot;minimum-cut-with-minimum-edges-problem&quot;&gt;Minimum cut with minimum edges problem&lt;/h1&gt;

&lt;p&gt;The classical minimum cut problem could be easily solved by algorithms like Ford-Fulkerson or Edmonds–Karp. But let’s analyze a special case of this problem.&lt;/p&gt;

&lt;p&gt;Suppose we have a pipe system and we want to determine the minimum cut for making some reparations. As the reparations include changing some pipes, we would like, if possible, to replace the least amount of pipes.&lt;/p&gt;

&lt;p&gt;For example, in the following network, we could find two minimum cuts: one consisting of two edges: &lt;strong&gt;S-A&lt;/strong&gt; and &lt;strong&gt;C-B&lt;/strong&gt;, and the other one consisting of only one: &lt;strong&gt;B-T&lt;/strong&gt;. In both cases the flow is 3, the minimum possible. Running a typical algorithm like Ford-Fulkerson or Edmonds-Karp could give us any of the two possible solutions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/graph3.png&quot; alt=&quot;Flow network 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a simple but effective solution to this problem. You have to transform the network capacities by the following formula:&lt;/p&gt;

\[C' = C (|E| + 1) + 1\]

&lt;p&gt;With \(C'\) the new capacity of each edge, \(C\) the old capacity, and \(\vert E \vert\) the amount of edges in the network.&lt;/p&gt;

&lt;p&gt;Let’s look to our example with the updated capacities:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/graph4.png&quot; alt=&quot;Flow network 2 updated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our previous minimum cut of S-A and C-B now has a total capacity of 20. Simultaneously the B-T cut has a capacity of 19. A new and lonely minimum!&lt;/p&gt;

&lt;h1 id=&quot;why-this-formula-works&quot;&gt;Why this formula works&lt;/h1&gt;

&lt;p&gt;Here I will detail a mathematical proof of why this formula works.&lt;/p&gt;

&lt;p&gt;We would like to prove two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our formula doesn’t convert original non-minimum cuts to minimum cuts.&lt;/li&gt;
  &lt;li&gt;From all the original minimum cuts, the formula keeps the one with the fewer amount of edges the strict minimum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;first-proof&quot;&gt;First proof&lt;/h2&gt;
&lt;p&gt;From the original network, let’s consider the minimum cut has a capacity \(k\) and cuts \(n\) edges. In our transformed network this cut will have a total capacity of \(k(|E| + 1) + n\). This is because:&lt;/p&gt;

&lt;div class=&quot;math-18&quot;&gt;\[\sum_{i=0}^n C_i(|E| + 1) + 1 =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= [C_0(|E| + 1) + 1] + [C_1(|E| + 1) + 1] + ... + [C_n(|E| + 1) + 1] =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= ((C_0 + C_1 + ... + C_n) (|E| + 1)) + n =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= k (|E| + 1) + n\]
&lt;/div&gt;

&lt;p&gt;Let us now take a non-minimal cut from the original network. It must have a capacity of at least \(k + 1\). Following the same reasoning as before, this cut will have a capacity of 
\((k + 1)(|E| + 1) + m\) with \(m\) the edges that this cut crosses.&lt;/p&gt;

&lt;p&gt;Let us compare the two cuts in the transformed network:&lt;/p&gt;

&lt;div class=&quot;math-18&quot;&gt;\[(k + 1)(|E| + 1) + m =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= k (|E| + 1) + (|E| + 1) + m &amp;gt;\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[&amp;gt; k (|E| + 1) + n + m &amp;gt;\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[&amp;gt; k (|E| + 1) + n\]
&lt;/div&gt;

&lt;p&gt;We can say that \((\vert E \vert + 1) &amp;gt; n\) because \(n\), the number of edges in any cut, is, at most, equal to the number of edges \(\vert E \vert\) in the graph.&lt;/p&gt;

&lt;h2 id=&quot;second-proof&quot;&gt;Second proof&lt;/h2&gt;
&lt;p&gt;Let us consider we have a graph with two (or more) minimal cuts. First, we will consider the one that crosses fewer edges. Again we will define a capacity of \(k\) and that crosses \(n\) edges. Also, we will define another minimal cut of, logically, capacity \(k\) but with more edges: \(n + u\) with \(u\) a natural number.&lt;/p&gt;

&lt;p&gt;Following the procedures in the first proof, we could easily conclude that the new capacities of the cuts in the transformed graph will be: \(k(\vert E \vert + 1) + n\) and \(k(\vert E \vert + 1) + (n + u)\). The minimal cut with minimal edges from the original graph will be the strict minimal in the new graph.&lt;/p&gt;

&lt;h1 id=&quot;minimum-cut-with-maximum-edges-problem&quot;&gt;Minimum cut with maximum edges problem&lt;/h1&gt;

&lt;p&gt;Now, let’s consider the opposite problem. We want to find the minimum cut that contains the maximum amount of edges. Like before we could transform the edges’ values by a simple formula:&lt;/p&gt;

\[C' = C |E| - 1\]

&lt;p&gt;Again I will show that this formula doesn’t convert non-minimal cuts to minimal cuts and that the minimal cut with maximum amount of edges is the new strict minimal cut.&lt;/p&gt;

&lt;h2 id=&quot;first-proof-1&quot;&gt;First proof&lt;/h2&gt;

&lt;p&gt;Like before, we could take two cuts: a minimal cut that crosses \(n\) edges and has a capacity \(k\) and a non-minimal cut that crosses \(m\) edges and has a capacity of at least \(k + 1\).&lt;/p&gt;

&lt;p&gt;After applying the proposed transformation, the minimal cut will have a capacity of \(k \vert E \vert - n\):&lt;/p&gt;

&lt;div class=&quot;math-18&quot;&gt;\[\sum_{i=0}^n C_i |E| - 1 =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= (C_0 |E| - 1) + (C_1 |E| - 1) + ... + (C_n |E| - 1) =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= ((C_0 + C_1 + ... + C_n) |E|) - n =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= k |E| - n\]
&lt;/div&gt;

&lt;p&gt;With the same reasoning, the transformed capacity of our non-minimal cut will be \((k + 1) \vert E \vert - m\).&lt;/p&gt;

&lt;p&gt;So let’s compare the two of them:&lt;/p&gt;

&lt;div class=&quot;math-18&quot;&gt;\[k \vert E \vert - n =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= k |E| - n + m - m =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= k |E| + (m - n) - m &amp;lt;\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[&amp;lt; k |E| + |E| - m =\]
&lt;/div&gt;

&lt;div class=&quot;math-18&quot;&gt;\[= (k + 1) \vert E \vert - m\]
&lt;/div&gt;

&lt;p&gt;In the third and fourth lines we considered that the difference of two numbers indicating amounts of edges \(n\), \(m\) must always be less than the total amount of edges \(\vert E \vert\).&lt;/p&gt;

&lt;h2 id=&quot;second-proof-1&quot;&gt;Second proof&lt;/h2&gt;

&lt;p&gt;As done before we will consider two cuts of the same capacity \(k\). One of them will cross \(n\) edges and the other \(n + u\) edges. In the transformed graph we would like that the second one to become the strict minimum cut.&lt;/p&gt;

&lt;p&gt;This is very simple to prove. The capacities in the transformed graph will be \(k \vert E \vert - n\) and \(k \vert E \vert - n - u\). Clearly, the second one will be the new minimum cut.&lt;/p&gt;

&lt;h2 id=&quot;a-look-at-the-new-graph&quot;&gt;A look at the new graph&lt;/h2&gt;

&lt;p&gt;Let’s see how the simple graph we have been working on would look like in this minimum cut with maximum edges case:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/graph5.png&quot; alt=&quot;Flow network 2 updated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cut consisting of &lt;strong&gt;S-A&lt;/strong&gt; and &lt;strong&gt;C-B&lt;/strong&gt; has a capacity of 13 while the cut of &lt;strong&gt;B-T&lt;/strong&gt; has a capacity of 14. We have a new minimum!&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;The shown methods work with positive integer and positive non-integer numbers. Still, it has the benefit of keeping integer weights to new integer weights.&lt;/p&gt;

&lt;p&gt;Another approach in the same style as the ones shown is to do the simpler transformation of:&lt;/p&gt;

\[C' = C \pm \epsilon\]

&lt;p&gt;Taking \(C' = C + \epsilon\) for the minimal edges case and \(C' = C - \epsilon\) for the maximum edges case. For this transformation to work we have to take a small \(\epsilon\) in comparison to \(1 / \vert E \vert\). This new method has the clear disadvantage of introducing non-integers weights.&lt;/p&gt;</content><author><name></name></author><category term="min-cut" /><category term="graph" /><category term="graph-theory" /><summary type="html">Last week I needed to solve a variation of the min-cut problem for flow networks. For those who don’t know about the minimum cut of a flow network, I will give a brief explanation. Flow networks A flow network is a directed graph, typically used to represent situations like traffic in computer networks, fluid in pipes, currents in an electrical circuit, vehicles in a road network. This graph’s edges typically have an associated weight known as capacity. In simple terms, its defines the maximum flow that could pass by that edge. Another important feature of these types of graphs is that they have a source node and a sink node. The source has only outgoing flow and the sink had only incoming flow. As an example: In this flow network, the S node is the source and the T node is the sink. The numbers along the edges represent the capacities. This is a pretty simple network, we obviously could represent much more complex ones. Minimum cut problem The minimum cut problem consists of, given a flow network, dividing it into two parts by cutting some edges. In one of the parts it must be included the source node and, in the other one, the sink node. It is a minimum cut because you have to select the edges which summation is minimum between all the possible cuts. Following the previous example, I marked some possible cuts. In this case the minimum cut is the one in blue which takes the edges S-A and C-T, totaling a minimum of 5. As a side note, the minimum cut is always the same as the maximum flow of the network, in this case 5. Minimum cut with minimum edges problem The classical minimum cut problem could be easily solved by algorithms like Ford-Fulkerson or Edmonds–Karp. But let’s analyze a special case of this problem. Suppose we have a pipe system and we want to determine the minimum cut for making some reparations. As the reparations include changing some pipes, we would like, if possible, to replace the least amount of pipes. For example, in the following network, we could find two minimum cuts: one consisting of two edges: S-A and C-B, and the other one consisting of only one: B-T. In both cases the flow is 3, the minimum possible. Running a typical algorithm like Ford-Fulkerson or Edmonds-Karp could give us any of the two possible solutions. There is a simple but effective solution to this problem. You have to transform the network capacities by the following formula: \[C' = C (|E| + 1) + 1\] With \(C'\) the new capacity of each edge, \(C\) the old capacity, and \(\vert E \vert\) the amount of edges in the network. Let’s look to our example with the updated capacities: Our previous minimum cut of S-A and C-B now has a total capacity of 20. Simultaneously the B-T cut has a capacity of 19. A new and lonely minimum! Why this formula works Here I will detail a mathematical proof of why this formula works. We would like to prove two things: Our formula doesn’t convert original non-minimum cuts to minimum cuts. From all the original minimum cuts, the formula keeps the one with the fewer amount of edges the strict minimum. First proof From the original network, let’s consider the minimum cut has a capacity \(k\) and cuts \(n\) edges. In our transformed network this cut will have a total capacity of \(k(|E| + 1) + n\). This is because: \[\sum_{i=0}^n C_i(|E| + 1) + 1 =\] \[= [C_0(|E| + 1) + 1] + [C_1(|E| + 1) + 1] + ... + [C_n(|E| + 1) + 1] =\] \[= ((C_0 + C_1 + ... + C_n) (|E| + 1)) + n =\] \[= k (|E| + 1) + n\] Let us now take a non-minimal cut from the original network. It must have a capacity of at least \(k + 1\). Following the same reasoning as before, this cut will have a capacity of \((k + 1)(|E| + 1) + m\) with \(m\) the edges that this cut crosses. Let us compare the two cuts in the transformed network: \[(k + 1)(|E| + 1) + m =\] \[= k (|E| + 1) + (|E| + 1) + m &amp;gt;\] \[&amp;gt; k (|E| + 1) + n + m &amp;gt;\] \[&amp;gt; k (|E| + 1) + n\] We can say that \((\vert E \vert + 1) &amp;gt; n\) because \(n\), the number of edges in any cut, is, at most, equal to the number of edges \(\vert E \vert\) in the graph. Second proof Let us consider we have a graph with two (or more) minimal cuts. First, we will consider the one that crosses fewer edges. Again we will define a capacity of \(k\) and that crosses \(n\) edges. Also, we will define another minimal cut of, logically, capacity \(k\) but with more edges: \(n + u\) with \(u\) a natural number. Following the procedures in the first proof, we could easily conclude that the new capacities of the cuts in the transformed graph will be: \(k(\vert E \vert + 1) + n\) and \(k(\vert E \vert + 1) + (n + u)\). The minimal cut with minimal edges from the original graph will be the strict minimal in the new graph. Minimum cut with maximum edges problem Now, let’s consider the opposite problem. We want to find the minimum cut that contains the maximum amount of edges. Like before we could transform the edges’ values by a simple formula: \[C' = C |E| - 1\] Again I will show that this formula doesn’t convert non-minimal cuts to minimal cuts and that the minimal cut with maximum amount of edges is the new strict minimal cut. First proof Like before, we could take two cuts: a minimal cut that crosses \(n\) edges and has a capacity \(k\) and a non-minimal cut that crosses \(m\) edges and has a capacity of at least \(k + 1\). After applying the proposed transformation, the minimal cut will have a capacity of \(k \vert E \vert - n\): \[\sum_{i=0}^n C_i |E| - 1 =\] \[= (C_0 |E| - 1) + (C_1 |E| - 1) + ... + (C_n |E| - 1) =\] \[= ((C_0 + C_1 + ... + C_n) |E|) - n =\] \[= k |E| - n\] With the same reasoning, the transformed capacity of our non-minimal cut will be \((k + 1) \vert E \vert - m\). So let’s compare the two of them: \[k \vert E \vert - n =\] \[= k |E| - n + m - m =\] \[= k |E| + (m - n) - m &amp;lt;\] \[&amp;lt; k |E| + |E| - m =\] \[= (k + 1) \vert E \vert - m\] In the third and fourth lines we considered that the difference of two numbers indicating amounts of edges \(n\), \(m\) must always be less than the total amount of edges \(\vert E \vert\). Second proof As done before we will consider two cuts of the same capacity \(k\). One of them will cross \(n\) edges and the other \(n + u\) edges. In the transformed graph we would like that the second one to become the strict minimum cut. This is very simple to prove. The capacities in the transformed graph will be \(k \vert E \vert - n\) and \(k \vert E \vert - n - u\). Clearly, the second one will be the new minimum cut. A look at the new graph Let’s see how the simple graph we have been working on would look like in this minimum cut with maximum edges case: The cut consisting of S-A and C-B has a capacity of 13 while the cut of B-T has a capacity of 14. We have a new minimum! Final thoughts The shown methods work with positive integer and positive non-integer numbers. Still, it has the benefit of keeping integer weights to new integer weights. Another approach in the same style as the ones shown is to do the simpler transformation of: \[C' = C \pm \epsilon\] Taking \(C' = C + \epsilon\) for the minimal edges case and \(C' = C - \epsilon\) for the maximum edges case. For this transformation to work we have to take a small \(\epsilon\) in comparison to \(1 / \vert E \vert\). This new method has the clear disadvantage of introducing non-integers weights.</summary></entry></feed>